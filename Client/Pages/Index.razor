@page "/"
@using System.Net.Http.Json
@using task5.Shared

<PageTitle>Home</PageTitle>

<MudSelect T="string" @bind-Value = "@_country" Label="Country" Variant="Variant.Filled" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged = "OnInitializedAsync">
    <MudSelectItem Value="@("Danish")"> Denmark (Danmark) </MudSelectItem>
    <MudSelectItem Value="@("Swiss")"> Switzerland </MudSelectItem>
</MudSelect>

<div>
<div class="d-inline-flex">
<MudTextField @bind-Value = "@_seed" Label="Seed" Variant="Variant.Outlined" Margin="Margin.Dense"  TextChanged = "OnInitializedAsync"/>
</div>
<div class="d-inline-flex">
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" OnClick="SeedInc">+</MudButton>
</div>
<div class="d-inline-flex">
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="SeedDec">-</MudButton>
</div>

<div class="d-inline-flex">
<MudTextField @bind-Value = "@_errors" Label="Errors" Variant="Variant.Outlined" Margin="Margin.Dense"  TextChanged = "OnInitializedAsync"/>
</div>
<div class="d-inline-flex">
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ErrorsInc">+</MudButton>
</div>
<div class="d-inline-flex">
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="ErrorsDec">-</MudButton>
</div>
<div class="d-inline-flex">
<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Default" OnClick="ErrorsRand">Random</MudButton>
</div>
</div>

<div id="Table" class="ma-0" style="height:350px; overflow: auto;">
@if (Users != null)
    {
    <table class = "table" style ="height: 350px;">
        <thead>
            <th>№</th>
            <th>ID</th>
            <th>Name</th>
            <th>Adress</th>
            <th>Phone</th>
        </thead>
        <tbody>
            @foreach(var user in Users){
                <tr>
                <td>@user.Number</td>
                <td>@user.ID</td>
                <td>@user.Name</td>
                <td>@user.Adress</td>
                <td>@user.Phone</td>
                </tr>
            }
        </tbody> 
    </table>
    }
    <MudScrollToTop TopOffset="100"
                    OnScroll="GetSomeMoreAsync"
                    Selector="#Table"
                    VisibleCssClass="visible absolute"
                    HiddenCssClass="invisible">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Filled.ArrowUpward" Color="Color.Info">Go to top</MudButton>
    </MudScrollToTop>
</div>

@code {
    public String _country = "Danish";
    public double _errors = 0.0;
    public int _seed = 0;
    private int _page = 0;
    List<User>? temp = new List<User>();
    IEnumerable<User>? Users;

    protected override async Task OnInitializedAsync()
    {   
        _page = 0;
        String msg = $"{_country},{_errors},{_seed},{_page},20";
        await HttpClientJsonExtensions.PostAsJsonAsync<String>(httpClient,"User",msg);
        temp = await httpClient.GetFromJsonAsync<List<User>>("User");
        Users = GetIEnumerable(temp);
    }

    private async Task GetSomeMoreAsync(ScrollEventArgs e)
    {   
        if (e.FirstChildBoundingClientRect.Height - e.ScrollTop <= 350){
        _page++;
        String msg = $"{_country},{_errors},{_seed},{_page},10";
        await HttpClientJsonExtensions.PostAsJsonAsync<String>(httpClient,"User",msg);
        temp.AddRange(await httpClient.GetFromJsonAsync<List<User>>("User"));
        Users = GetIEnumerable(temp);
        }
    }

    private IEnumerable<User> GetIEnumerable(List<User> temp)
    {
        List<User> Users = temp;
        return Users;
    }

    private async Task ErrorsInc(){
        _errors+=0.5;
        await OnInitializedAsync();
    }

    private async Task ErrorsDec(){
        if(_errors != 0.0){
            _errors-=0.5;
        }
        await OnInitializedAsync();
    }

    private async Task SeedInc(){
        _seed+=1;
        await OnInitializedAsync();
    }

    private async Task SeedDec(){
        if(_seed != 0){
            _seed-=1;
        }
        await OnInitializedAsync();
    }

    private async Task ErrorsRand(){
        Random r = new Random();
        _errors = r.Next(0, 1000);
    }
}